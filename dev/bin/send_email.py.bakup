#!/usr/bin/python

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
import yaml
import os
import glob
import csv
import re
import logging
from datetime import date, datetime
import time
import jinja2
import sys
import json


dir_path = os.path.dirname(os.path.realpath(__file__))
cfgfile = dir_path + '/../etc/config/main.cfg'

with open(cfgfile, 'r') as f:
    cfgobj = yaml.load(f)

today = str(datetime.strftime(date.today(), '%Y_%m_%d'))

processed_folder = cfgobj["Main"]["processedfolder"]
to_process_folder = cfgobj["Main"]["toprocessfolder"]

dir_path = os.path.dirname(os.path.realpath(__file__))
scriptname = os.path.basename(__file__).split(".")[0]


check_countr = 0
lck_fil_cntr = int(cfgobj["Main"]["lockfile_check_counter"])
lck_file_wait_time = int(cfgobj["Main"]["lockfile_wait_time"])

admin_temp_file = cfgobj["Mail"]["admin_template_file"]


logfilenam = dir_path + '/../logs/' + scriptname + '_' + today + '.log'
logger = logging.getLogger('main')
logger.setLevel(logging.INFO)
ch = logging.FileHandler(logfilenam)
ch.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s:%(levelname)s:%(message)s", datefmt='%m/%d/%Y %I:%M:%S %p')
ch.setFormatter(formatter)
logger.addHandler(ch)


def render_template(template, **kwargs):
    if not os.path.exists(template):
        logger.info("Template file %s not found", template)
        sys.exit()
    templateLoader = jinja2.FileSystemLoader(searchpath="/")
    templateEnv = jinja2.Environment(loader=templateLoader)
    templ = templateEnv.get_template(template)
    return templ.render(**kwargs)

#This function return the list of files in the path.
#This function tales path as the argument and returns the list of files in that path
def get_files_list(path):
    logger.info("Inside get_files_list function")
    logger.info("Going to get list of files from : %s", path)
    file_list = glob.glob(path + "/*.csv")
    if (file_list):
        logger.info("Count of files in the path is: %s", str(len(file_list)))
    else:
        logger.info("No files in the path")
    return file_list


#This function is used to send emails to the requestors and the admins.
def send_email(SUBJECT, BODY, TO, FROM):
    relay_host = cfgobj["Mail"]["relay_host"]
    MESSAGE = MIMEMultipart('alternative')
    MESSAGE['subject'] = SUBJECT
    MESSAGE['To'] = TO
    MESSAGE['From'] = FROM
    rcpt = TO
    HTML_BODY = MIMEText(BODY, 'html')
    MESSAGE.attach(HTML_BODY)
    server = smtplib.SMTP(relay_host)
    server.sendmail(FROM, rcpt.split(','), MESSAGE.as_string())
    server.quit()

def remove_lock_files(locn):
    lck_file_list = glob.glob(locn + "/*.lck")
    create_by_time = time.time() - 30 * 60
    lck_fil_chk_cntr = 0
    for lckfil in lck_file_list:
        if (os.path.getctime(lckfil) < create_by_time):
            while (lck_fil_chk_cntr < 3 and os.path.isfile(lckfil)):
                time.sleep(5)
                lck_fil_chk_cntr = lck_fil_chk_cntr + 1
                try:
                    os.remove(lckfil)
                except Exception as e:
                    logger.info("Error is: %s", str(e))
    if (len(glob.glob(locn + "/*.lck"))) > 0:
        return False
    else:
        return True
                
                
        
    

#This function processes the output file i.e. csv file containing permissions which is generated by script running on cluster and sends email to the requestor.
#The file name is requestoremailid.csv
def process_output():
    logger.info("Inside process_output function")
    mail_temp_file = cfgobj["Mail"]["mail_template_file"]
    fromaddr = cfgobj["Mail"]["mail_from"]
    main_path = cfgobj["Mail"]["main_mount_path"]
    envrnmnt = cfgobj["Main"]["environment"]
    loc_list = cfgobj["Mail"]["region_mapped_path"].split(',')
    admin_temp_val = {}
    for l in loc_list:
        logger.info("Going to process for location: %s", l)
        to_process_locn = main_path + l + "/" + envrnmnt + "/" + to_process_folder
        logger.info("GOing to delete lock files in %s", to_process_locn)
        stat_del_lck_file = remove_lock_files(to_process_locn)
        if (stat_del_lck_file == False):
            logger.info("Lock file under %s still exists which was created by web application code", to_process_locn)
            admin_temp_val['files'] = to_process_locn
            admin_temp_val['sender_mail'] = fromaddr
            html = render_template(admin_temp_file, val=admin_temp_val)
            send_email(cfgobj["Message"]["lock_file_issue_subject"], html, cfgobj["Mail"]["admin_mail"], fromaddr)
            
        locpth = main_path + l + "/" + envrnmnt + "/" + processed_folder
        list_of_files = get_files_list(locpth)
        for lf in list_of_files:
            logger.info("Going to process file: %s", lf)
            lckfile = lf + '.lck'
            if (os.path.isfile(lckfile)):
                logger.info("Lock File exists:%s",lckfile)
                create_by_time = time.time() - 30 * 60
                if (os.path.getctime(lckfile) < create_by_time):
                    chk_cntr = 0
                    while (chk_cntr < 3 and os.path.isfile(lckfile)):
                        chk_cntr = chk_cntr + 1
                        time.sleep(5)
                        try:
                            os.remove(lckfile)
                        except Exception as e:
                            logger.info("Error is: %s", str(e))
                else:
                    while (check_countr < lck_fil_cntr and os.path.isfile(lckfile)):
                        check_countr = check_countr + 1
                        logger.info("Check counter: %s", str(check_countr))
                        time.sleep(lck_file_wait_time)
            if (os.path.isfile(lckfile)):
                logger.info("Lock file still exists which was created by cluster code %s", lckfile)
                admin_temp_val['files'] = lckfile
                admin_temp_val['sender_mail'] = fromaddr
                html = render_template(admin_temp_file, val=admin_temp_val)
                send_email(cfgobj["Message"]["lock_file_issue_subject"], html, cfgobj["Mail"]["admin_mail"], fromaddr)
                next(lf)
            else:
                with open(lf, 'r') as f:
                    reader = json.load(f)
                    for val in reader['path']:
                        final_val = {}
                        perm_str = ""
                        perm_dic = {}
                        pth = val['Path']
                        requestor = val['Requestor']
                        dfspath = val['DFS Path']
			print dfspath
                        if (dfspath != "NA"):
                            dfcorval = dfspath.decode('string_escape').replace("u'", "'").replace("'", "")
                        perm = val['Permission']
                        level7path = val['L7 Path']
                        level7security = val['L7 Security Style']
                        perm_lst = perm.split(";")
                        cnt = len(perm_lst)
                        logger.info("Permission Count: %s", cnt)
                        for a in range(0, cnt):
                            if (perm_lst[a]):
                                print perm_lst[a]
                                if ("->" in perm_lst[a]):
                                    pval = perm_lst[a].split("->")[1]
                                    val1 = re.sub(r'.* dir_gen_', 'dir_gen_', pval)
                                    pval_lst = val1.split("|")
                                    fval = ''
                                    for i in pval_lst:
                                        if ("dir_gen" in i):
                                            fval = fval + i.split("dir_gen_")[1] + ","
                                    fin_val = fval[:-1]
                                    if (fin_val.lower() == 'all'):
                                        fin_val = 'Full Control'
                                    if (perm_lst[a].split("->")[0] in perm_dic):
                                        perm_dic[perm_lst[a].split("->")[0]] = perm_dic[perm_lst[a].split("->")[0]] + fin_val
                                    else:
                                        perm_dic[perm_lst[a].split("->")[0]] = fin_val
                                else:
                                    perm_str = perm_lst[a]
                        if (perm_str == ""):
                            if ('Administrators' in perm_dic):
                                del perm_dic['Administrators']
                                if (len(perm_dic) > 0):
                                    final_val['perm_val'] = perm_dic
                                else:
                                    final_val['perm_str'] = cfgobj["Message"]["no-fgo-grp"]
                            elif ('wheel' in perm_dic):
                                del perm_dic['wheel']
                                if (len(perm_dic) > 0):
                                    final_val['perm_val'] = perm_dic
                                else:
                                    final_val['perm_str'] = cfgobj["Message"]["no-fgo-grp"]

                            else:
                                final_val['perm_val'] = perm_dic
                        else:
                            final_val['perm_str'] = perm_str
                        print final_val
                        sendingaddr =  requestor
                        if (dfspath != "NA"):
                            pth = dfcorval
                        if (level7security != ''):
                            if (level7security != "NA"):
                                final_val['security_style'] = level7security
                            else:
                                final_val['security_style'] = ''
                        else:
                            final_val['security_style'] = ''
                        final_val['sender_mail'] = cfgobj["Mail"]["mail_from"]
                        subject = cfgobj["Mail"]["subject"] + pth
                        final_val['name'] = requestor.split("@")[0].split(".")[0].capitalize()
                        final_val['path'] = pth
			print final_val['path']
                        html = render_template(mail_temp_file, val=final_val)
                        send_email(subject, html, sendingaddr, fromaddr)
                        logger.info("Mail Sent to: %s", sendingaddr)

            try:
                os.remove(lf)
                logger.info("File Deleted from processed folder : %s", lf)
            except Exception as e:
                logger.info("File %s could not be deleted from processed folder", lf)
                logger.info("Error is: %s", str(e))
                admin_temp_val['files'] = lf
                admin_temp_val['sender_mail'] = fromaddr
                send_email(cfgobj["Message"]["file_issue_subject"], html, cfgobj["Mail"]["admin_mail"], fromaddr)



# This main part from where code execution starts.
if __name__ == "__main__":
    process_output()



